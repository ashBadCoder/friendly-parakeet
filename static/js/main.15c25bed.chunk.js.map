{"version":3,"sources":["Root/App.module.css","Components/toolbarComponent/CustomToolBar.tsx","Components/drawerComponent/navigationsList/NavigationsList.tsx","utils/media-query.tsx","Components/drawerComponent/CustomeDrawer.tsx","Components/mapComponent/MapComponent.tsx","Root/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","App","searchButtonOptions","icon","onClick","console","log","textBoxOptions","placeholder","showClearButton","CustomToolBar","props","menuButton","toggleMenu","prev","react_default","a","createElement","Fragment","toolbar_default","toolbar","widget","options","location","render","devextreme_react","text","locateInMenu","authRoutes","id","caption","NavigationList","useHistory","resultedItems","map","items","i","Object","objectSpread","className","width","selectionMode","onSelectionChanged","e","addedItems","length","path","stylingMode","useScreenSize","_useState","useState","getScreenSize","_useState2","slicedToArray","screenSize","setScreenSize","onSizeChanged","useCallback","useEffect","subscribe","unsubscribe","handlers","xSmallMedia","window","matchMedia","smallMedia","mediumMedia","largeMedia","forEach","media","addListener","matches","handler","push","filter","item","isXSmall","isSmall","isMedium","isLarge","CustomDrawer","_ref","isOpened","children","setState","_useScreenSize","onOutsideClick","drawer_default","minSize","height","openedStateMode","revealMode","component","NavigationsList_NavigationList","opened","shading","closeOnOutsideClick","mapTypes","key","name","MapComponent","mapTypeValue","setMapTypeValue","select_box_default","value","onValueChanged","dataSource","displayExpr","valueExpr","map_default","defaultCenter","defaultZoom","apiKey","google","provider","type","drawerRef","useRef","styles","CustomToolBar_CustomToolBar","MapComponent_MapComponent","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","StrictMode","Root_App"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,IAAA,sPCQZC,EAAsB,CACxBC,KAAM,SACNC,QAFwB,WAGpBC,QAAQC,IAAI,WAGdC,EAAiB,CACnBC,YAAa,YACbC,iBAAiB,GAIRC,EAAgB,SAACC,GAC1B,IAAMC,EAAa,CACfT,KAAM,gBACNC,QAFe,WAGXC,QAAQC,IAAI,SACZK,EAAME,WAAW,SAACC,GAAD,OAAoBA,MAI7C,OAAOC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACHH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,KACID,EAAAC,EAAAC,cAACG,EAAA,KAAD,CACIC,OAAO,WACPC,QAASV,EACTW,SAAU,WAEdR,EAAAC,EAAAC,cAACG,EAAA,KAAD,CACIG,SAAU,QACVF,OAAO,YACPG,OAAQ,kBAAMT,EAAAC,EAAAC,cAACQ,EAAA,QAAYlB,MAE/BQ,EAAAC,EAAAC,cAACG,EAAA,KAAD,CACIC,OAAO,WACPC,QAASpB,EACTqB,SAAU,UAEdR,EAAAC,EAAAC,cAACG,EAAA,KAAD,CACIC,OAAO,WACPC,QAAS,CAACnB,KAAM,QAASC,QAAS,kBAAMC,QAAQC,IAAI,UAAUoB,KAAM,SACpEH,SAAU,QACVI,aAAc,kDC9CjBC,UAAa,CACtB,CAACC,GAAI,IAAKC,QAAS,uCAAU3B,KAAM,QACnC,CAAC0B,GAAI,IAAKC,QAAS,uCAAU3B,KAAM,aACnC,CAAC0B,GAAI,IAAKC,QAAS,uCAAU3B,KAAM,UAE1B4B,EAAiB,WAKVC,cAJhB,IAKMC,EAAgBL,EAAWM,IAAI,SAACC,EAAOC,GACzC,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAIF,EAAX,CAAkBN,GAAIO,EAAGV,KAAMS,EAAML,YAGzC,OACIf,EAAAC,EAAAC,cAAA,OAAKsB,UAAW,2BACZxB,EAAAC,EAAAC,cAACQ,EAAA,KAAD,CACIc,UAAW,0BACXJ,MAAOF,EACPO,MAAO,IACPC,cAAc,SACdC,mBAhBK,SAACC,GACTA,EAAEC,WAAWC,QAAUF,EAAEC,WAAW,GAAGE,QAgBxC/B,EAAAC,EAAAC,cAACQ,EAAA,OAAD,CACIc,UAAW,uBACXQ,YAAa,WACb5C,KAAM,cACNqC,MAAO,QC7BVQ,EAAgB,WAAM,IAAAC,EACKC,mBAASC,KADdC,EAAAf,OAAAgB,EAAA,EAAAhB,CAAAY,EAAA,GACxBK,EADwBF,EAAA,GACZG,EADYH,EAAA,GAEzBI,EAAgBC,sBAAY,WAC9BF,EAAcJ,MACf,IAUH,OARAO,oBAAU,WAGN,OAFAC,EAAUH,GAEH,WACHI,EAAYJ,KAEjB,CAACA,IAEGF,GAqBPO,EAAgB,GACdC,EAAcC,OAAOC,WAAW,yBAChCC,EAAaF,OAAOC,WAAW,gDAC/BE,EAAcH,OAAOC,WAAW,iDAChCG,EAAaJ,OAAOC,WAAW,uBAErC,CAACF,EAAaG,EAAYC,EAAaC,GAAYC,QAAQ,SAAAC,GACvDA,EAAMC,YAAY,SAAC3B,GACfA,EAAE4B,SAAWV,EAASO,QAAQ,SAACI,GAAD,OAAkBA,UAIxD,IAAMb,EAAY,SAACa,GAAD,OAAkBX,EAASY,KAAKD,IAE5CZ,EAAc,SAACY,GACjBX,EAAWA,EAASa,OAAO,SAACC,GAAD,OAAeA,IAASH,KAGvD,SAASrB,IAEL,OADA9C,QAAQC,IAAI,kBACL,CACHsE,SAAUd,EAAYS,QACtBM,QAASZ,EAAWM,QACpBO,SAAUZ,EAAYK,QACtBQ,QAASZ,EAAWI,SC/CrB,SAASS,EAATC,GAA2D,IAApCC,EAAoCD,EAApCC,SAAUC,EAA0BF,EAA1BE,SAAUC,EAAgBH,EAAhBG,SAAgBC,EAChCrC,IAAtB4B,EADsDS,EACtDT,SAAUG,EAD4CM,EAC5CN,QAEZO,EAAiB7B,sBAAY,WAE/B,OADA2B,EAAS,SAACtE,GAAD,OAAoBA,KACtB,GACR,IACH,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CACIwE,QAASZ,EAAW,EAAI,GACxBa,OAAQ,OACRC,gBAAiBX,EAAU,SAAW,UACtCY,WAAYf,EAAW,QAAU,SACjCgB,UAAW,kBAAM7E,EAAAC,EAAAC,cAAC4E,EAAD,OACjBC,OAAQZ,EACRa,UAASnB,EACToB,oBAAqBV,GAEpBH,4CC5BJc,UAAgB,CAAC,CAC1BC,IAAK,UACLC,KAAM,YACP,CACCD,IAAK,YACLC,KAAM,gCACP,CACCD,IAAK,SACLC,KAAM,gBAGGC,EAAiB,WAAM,IAAAnD,EACQC,mBAAS+C,EAAS,GAAGC,KAD7B9C,EAAAf,OAAAgB,EAAA,EAAAhB,CAAAY,EAAA,GACzBoD,EADyBjD,EAAA,GACXkD,EADWlD,EAAA,GAQ5B,OACIrC,EAAAC,EAAAC,cAAA,OAAKsB,UAAW,oBACZxB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,UACXxB,EAAAC,EAAAC,cAACsF,EAAAvF,EAAD,CACIwF,MAAOH,EACPI,eAVI,SAAC9D,GACtB2D,EAAgB3D,EAAE6D,QAUDE,WAAYT,EACZU,YAAY,OACZC,UAAU,SAGlB7F,EAAAC,EAAAC,cAAC4F,EAAA7F,EAAD,CACI8F,cAAc,8BACdC,YAAa,GACbC,OAhBH,CAACC,OAAQ,4BAiBNxB,OAAQ,OACRjD,MAAM,OACN0E,SAAS,OACTC,KAAMd,iCCXXpG,MAhBf,WAEI,IAAMmH,EAAYC,iBAAO,MAFdpE,EAGkBC,oBAAS,GAH3BE,EAAAf,OAAAgB,EAAA,EAAAhB,CAAAY,EAAA,GAGJiC,EAHI9B,EAAA,GAGMgC,EAHNhC,EAAA,GAMb,OACErC,EAAAC,EAAAC,cAAA,OAAKsB,UAAW+E,IAAOrH,KACnBc,EAAAC,EAAAC,cAACsG,EAAD,CAAe1G,WAAauE,IAC5BrE,EAAAC,EAAAC,cAAC+D,EAAD,CAAcoC,UAAWA,EAAWlC,SAAUA,EAAUE,SAAUA,GAC9DrE,EAAAC,EAAAC,cAACuG,EAAD,SCZGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAjF,EAAA,GAAAkF,KAAAD,EAAAE,KAAA,WAAqBD,KAAK,SAAA5C,GAAiD,IAA9C8C,EAA8C9C,EAA9C8C,OAAQC,EAAsC/C,EAAtC+C,OAAQC,EAA8BhD,EAA9BgD,OAAQC,EAAsBjD,EAAtBiD,OAAQC,EAAclD,EAAdkD,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCHDU,IAASC,WACpBC,SAASC,eAAe,SAErB/G,OACHT,EAAAC,EAAAC,cAACF,EAAAC,EAAMwH,WAAP,KACEzH,EAAAC,EAAAC,cAACwH,EAAD,QAOJhB","file":"static/js/main.15c25bed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__7dYXl\"};","import React from 'react';\r\nimport Toolbar, { Item } from 'devextreme-react/toolbar';\r\nimport {TextBox} from \"devextreme-react\";\r\n\r\ntype ToolbarProps = {\r\n    toggleMenu: any\r\n};\r\n\r\n\r\nconst searchButtonOptions = {\r\n    icon: 'search',\r\n    onClick() {\r\n        console.log('click')\r\n    }\r\n}\r\nconst textBoxOptions = {\r\n    placeholder: 'Search...',\r\n    showClearButton: true\r\n}\r\n\r\n\r\nexport const CustomToolBar = (props: ToolbarProps) => {\r\n    const menuButton = {\r\n        icon: 'contentlayout',\r\n        onClick() {\r\n            console.log('click')\r\n            props.toggleMenu((prev: boolean) => !prev );\r\n        }\r\n    };\r\n\r\n    return <>\r\n        <Toolbar>\r\n            <Item\r\n                widget=\"dxButton\"\r\n                options={menuButton}\r\n                location={'before'}\r\n            />\r\n            <Item\r\n                location={'after'}\r\n                widget=\"dxTextBox\"\r\n                render={() => <TextBox {...textBoxOptions}></TextBox>}\r\n            />\r\n            <Item\r\n                widget=\"dxButton\"\r\n                options={searchButtonOptions}\r\n                location={'after'}\r\n            />\r\n            <Item\r\n                widget=\"dxButton\"\r\n                options={{icon: 'share', onClick: () => console.log('share'), text: 'share'}}\r\n                location={'after'}\r\n                locateInMenu={'always'}\r\n            />\r\n        </Toolbar>\r\n    </>\r\n}","import {useHistory} from \"react-router\";\r\nimport {Button, List} from \"devextreme-react\";\r\nimport React from \"react\";\r\nimport './navigationList.css';\r\n\r\nexport const authRoutes = [\r\n    {id: '1', caption: 'третий', icon: 'home'},\r\n    {id: '2', caption: 'второй', icon: 'favorites'},\r\n    {id: '3', caption: 'первый', icon: 'find',}\r\n]\r\nexport const NavigationList = () => {\r\n    const loadView = (e: any) => {\r\n        if (!e.addedItems.length || e.addedItems[0].path === '/reference/:id') return;\r\n        // history.push(e.addedItems[0].path);\r\n    }\r\n    const history = useHistory();\r\n    const resultedItems = authRoutes.map((items, i) => {\r\n        return {...items, id: i, text: items.caption}\r\n    })\r\n\r\n    return (\r\n        <div className={'sideBar-links-container'}>\r\n            <List\r\n                className={'sideBar-links-mainLinks'}\r\n                items={resultedItems}\r\n                width={200}\r\n                selectionMode=\"single\"\r\n                onSelectionChanged={loadView}/>\r\n            <Button\r\n                className={'sideBar-links-footer'}\r\n                stylingMode={'outlined'}\r\n                icon={'preferences'}\r\n                width={200}\r\n            />\r\n        </div>\r\n    );\r\n}","import { useState, useCallback, useEffect } from 'react';\r\n\r\n\r\nexport const useScreenSize = () => {\r\n    const [screenSize, setScreenSize] = useState(getScreenSize());\r\n    const onSizeChanged = useCallback(() => {\r\n        setScreenSize(getScreenSize());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        subscribe(onSizeChanged);\r\n\r\n        return () => {\r\n            unsubscribe(onSizeChanged);\r\n        };\r\n    }, [onSizeChanged]);\r\n\r\n    return screenSize;\r\n};\r\n\r\nexport const useScreenSizeClass = () => {\r\n    const screenSize = useScreenSize();\r\n\r\n    if (screenSize.isLarge) {\r\n        return 'screen-large';\r\n    }\r\n\r\n    if (screenSize.isMedium) {\r\n        return 'screen-medium';\r\n    }\r\n\r\n    if (screenSize.isSmall) {\r\n        return 'screen-small';\r\n    }\r\n\r\n    return 'screen-x-small';\r\n}\r\n\r\nlet handlers: any = [];\r\nconst xSmallMedia = window.matchMedia('(max-width: 599.99px)');\r\nconst smallMedia = window.matchMedia('(min-width: 600px) and (max-width: 959.99px)');\r\nconst mediumMedia = window.matchMedia('(min-width: 960px) and (max-width: 1279.99px)');\r\nconst largeMedia = window.matchMedia('(min-width: 1280px)');\r\n\r\n[xSmallMedia, smallMedia, mediumMedia, largeMedia].forEach(media => {\r\n    media.addListener((e) => {\r\n        e.matches && handlers.forEach((handler: any) => handler());\r\n    });\r\n});\r\n\r\nconst subscribe = (handler: any) => handlers.push(handler);\r\n\r\nconst unsubscribe = (handler: any) => {\r\n    handlers = handlers.filter((item: any) => item !== handler);\r\n};\r\n\r\nfunction getScreenSize() {\r\n    console.log('get screenSize')\r\n    return {\r\n        isXSmall: xSmallMedia.matches,\r\n        isSmall: smallMedia.matches,\r\n        isMedium: mediumMedia.matches,\r\n        isLarge: largeMedia.matches\r\n    };\r\n}\r\n","import Drawer from 'devextreme-react/drawer';\r\nimport React, {useCallback, useState} from 'react';\r\nimport {NavigationList} from \"./navigationsList/NavigationsList\";\r\nimport {MapComponent} from \"../mapComponent/MapComponent\";\r\nimport {useScreenSize} from \"../../utils/media-query\";\r\n\r\n\r\n\r\nconst MenuStatus = {\r\n    Closed: 1,\r\n    Opened: 2,\r\n    TemporaryOpened: 3\r\n};\r\n\r\n\r\nexport function CustomDrawer({isOpened, children, setState}: any) {\r\n    const { isXSmall, isLarge } = useScreenSize();\r\n\r\n    const onOutsideClick = useCallback(() => {\r\n        setState((prev: boolean) => !prev)\r\n        return true;\r\n    }, []);\r\n    return (\r\n        <>\r\n            <Drawer\r\n                minSize={isXSmall ? 0 : 37}\r\n                height={'100%'}\r\n                openedStateMode={isLarge ? 'shrink' : 'overlap'}\r\n                revealMode={isXSmall ? 'slide' : 'expand'}\r\n                component={() => <NavigationList/>}\r\n                opened={isOpened}\r\n                shading={isXSmall ? true:false}\r\n                closeOnOutsideClick={onOutsideClick}\r\n                >\r\n                {children}\r\n            </Drawer>\r\n        </>\r\n    );\r\n}\r\n\r\n","import React, {useState} from 'react';\r\n\r\nimport Map from 'devextreme-react/map';\r\nimport SelectBox from 'devextreme-react/select-box';\r\n\r\nimport './mapContent.css';\r\nexport const mapTypes: any = [{\r\n    key: 'roadmap',\r\n    name: 'Road Map',\r\n}, {\r\n    key: 'satellite',\r\n    name: 'Satellite (Photographic) Map',\r\n}, {\r\n    key: 'hybrid',\r\n    name: 'Hybrid Map',\r\n}];\r\n\r\nexport const MapComponent  =  () => {\r\n    const [mapTypeValue, setMapTypeValue] = useState(mapTypes[0].key);\r\n\r\n   const onMapTypeChanged = (e: any) => {\r\n       setMapTypeValue(e.value)\r\n    }\r\n    const keys = {google: \"YOUR_GOOGLE_MAPS_API_KEY\"}\r\n\r\n        return (\r\n            <div className={'contentContainer'}>\r\n                <div className=\"option\">\r\n                    <SelectBox\r\n                        value={mapTypeValue}\r\n                        onValueChanged={onMapTypeChanged}\r\n                        dataSource={mapTypes}\r\n                        displayExpr=\"name\"\r\n                        valueExpr=\"key\"\r\n                    />\r\n                </div>\r\n                <Map\r\n                    defaultCenter=\"Brooklyn Bridge,New York,NY\"\r\n                    defaultZoom={14}\r\n                    apiKey={keys}\r\n                    height={'100%'}\r\n                    width=\"100%\"\r\n                    provider=\"bing\"\r\n                    type={mapTypeValue}>\r\n                </Map>\r\n\r\n            </div>\r\n        );\r\n\r\n}\r\n\r\n","import React, {useCallback, useMemo, useRef, useState} from 'react';\n\nimport {CustomToolBar} from \"../Components/toolbarComponent/CustomToolBar\";\nimport {CustomDrawer} from \"../Components/drawerComponent/CustomeDrawer\";\nimport {MapComponent} from \"../Components/mapComponent/MapComponent\";\n\nimport 'devextreme/dist/css/dx.light.css';\nimport styles from './App.module.css';\nimport {useScreenSize} from \"../utils/media-query\";\n\nconst MenuStatus = {\n    Closed: 1,\n    Opened: 2,\n    TemporaryOpened: 3\n};\n\nfunction App() {\n\n    const drawerRef = useRef(null);\n    const [isOpened, setState] = useState(false);\n\n\n  return (\n    <div className={styles.App}>\n        <CustomToolBar toggleMenu={ setState}/>\n        <CustomDrawer drawerRef={drawerRef} isOpened={isOpened} setState={setState}>\n            <MapComponent />\n        </CustomDrawer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './Root/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}